
#ifndef SMALLDENSE_H
#define SMALLDENSE_H

#define SMALLDENSE_INPUT_SIZE 64
#define SMALLDENSE_OUTPUT_SIZE 3

class SmallDense
{
public:
    int inputSize;
    int outputSize;

    ///
    //MEMORY ALLOCATION IS DONE HERE MANUALLY
    ///

    float weights[SMALLDENSE_OUTPUT_SIZE][SMALLDENSE_INPUT_SIZE]= //[outputSize][inputSize]
    {
        {0.08078060299158096f, 0.07116405665874481f, -0.003952561877667904f, 0.09990178793668747f, -0.02532537654042244f, 0.16952891647815704f, -0.20199047029018402f, 0.286044180393219f, 0.07830352336168289f, -0.20959512889385223f, 0.11384737491607666f, 0.259680837392807f, -0.18449193239212036f, 0.03849410265684128f, -0.13563388586044312f, -0.3100805878639221f, -0.27232566475868225f, 0.05332205817103386f, 0.2730358839035034f, -0.1185380071401596f, 0.06093553826212883f, 0.2621096670627594f, -0.3278094530105591f, -0.18345996737480164f, 0.3264210820198059f, 0.26634150743484497f, -0.22318100929260254f, -0.04326070472598076f, 0.23646408319473267f, -0.3393729031085968f, 0.3098779022693634f, 0.1101195439696312f, -0.16480737924575806f, -0.15718480944633484f, -0.2527427673339844f, -0.16338977217674255f, 0.07021980732679367f, -0.31960687041282654f, -0.16116198897361755f, 0.0987459197640419f, 0.17023061215877533f, 0.16648463904857635f, -0.08789487183094025f, -0.10882510244846344f, -0.08566112071275711f, 0.17659319937229156f, 0.12726712226867676f, 0.32162779569625854f, 0.2931596040725708f, -0.07748091220855713f, -0.35786256194114685f, 0.11335960030555725f, 0.1507406085729599f, -0.03344389423727989f, 0.08021616190671921f, -0.2906629145145416f, -0.27439984679222107f, 0.27063971757888794f, 0.24756604433059692f, 0.03737917169928551f, 0.11350652575492859f, -0.023160967975854874f, -0.16482135653495789f, -0.22204789519309998f},
        {0.09967602789402008f, -0.17231550812721252f, -0.17675772309303284f, -0.16093313694000244f, 0.15100277960300446f, -0.27842849493026733f, 0.27017655968666077f, -0.3265870213508606f, 0.11114387214183807f, 0.021455055102705956f, -0.279059499502182f, -0.2564094662666321f, -0.14029675722122192f, -0.2187974900007248f, 0.28457126021385193f, 0.11551035195589066f, 0.2652968764305115f, -0.047692012041807175f, 0.17124272882938385f, 0.3194532096385956f, 0.06897055357694626f, -0.2710920572280884f, 0.14824725687503815f, 0.2390797883272171f, 0.08191647380590439f, 0.014426537789404392f, 0.32322680950164795f, -0.29536792635917664f, 0.3067482113838196f, 0.12473290413618088f, 0.02508391998708248f, 0.0080459825694561f, 0.17169766128063202f, -0.00246235984377563f, 0.33399343490600586f, 0.20603938400745392f, -0.3109397292137146f, -0.13062064349651337f, 0.21385300159454346f, 0.01963200978934765f, -0.2148319035768509f, 0.2892988622188568f, 0.28560566902160645f, 0.019178545102477074f, -0.04619193449616432f, -0.23682786524295807f, -0.07859522104263306f, 0.28691768646240234f, 0.017608368769288063f, 0.265235960483551f, 0.13241252303123474f, 0.16697080433368683f, -0.33034616708755493f, 0.3199955224990845f, -0.28178074955940247f, -0.04705042392015457f, 0.29938092827796936f, 0.16503199934959412f, 0.16132871806621552f, -0.30856290459632874f, -0.0682515874505043f, 0.008683298714458942f, -0.13751725852489471f, 0.2033652514219284f},
        {0.03473152592778206f, -0.1565990447998047f, 0.05442831665277481f, 0.044076256453990936f, 0.028495177626609802f, -0.06168488785624504f, -0.0107126384973526f, 0.06558498740196228f, -0.05016093701124191f, -0.015348321758210659f, 0.13969022035598755f, -0.042352255433797836f, 0.09456532448530197f, -0.04696332663297653f, -0.029912825673818588f, 0.020504435524344444f, 0.2672330439090729f, 0.19966311752796173f, 0.16701477766036987f, -0.3063686788082123f, -0.310443252325058f, 0.27310091257095337f, 0.041495464742183685f, 0.09731335937976837f, 0.1825849562883377f, -0.2622776925563812f, 0.11073748022317886f, 0.08116649091243744f, 0.08593558520078659f, -0.04743357375264168f, -0.2572600841522217f, -0.0422503761947155f, 0.15435829758644104f, -0.25522854924201965f, -0.20567703247070312f, 0.08161861449480057f, -0.1446908861398697f, -0.07470855861902237f, 0.12996099889278412f, -0.07356934249401093f, 0.056688811630010605f, 0.13613025844097137f, -0.307894229888916f, 0.27278661727905273f, 0.21357950568199158f, -0.048059090971946716f, 0.12932300567626953f, 0.05253595486283302f, -0.07187167555093765f, 0.13015133142471313f, 0.25133728981018066f, -0.19222815334796906f, 0.08378154784440994f, -0.19188307225704193f, -0.004651294555515051f, 0.13053683936595917f, -0.27010831236839294f, -0.23356075584888458f, -0.10031037777662277f, 0.05292265862226486f, -0.2733207643032074f, -0.13166196644306183f, -0.004619327839463949f, -0.3048948347568512f}
    };

    float bias[SMALLDENSE_OUTPUT_SIZE]= // [outputSize]
    {0.002310618292540312f, 0.004937402438372374f, -0.003467426635324955f};

    float output[SMALLDENSE_OUTPUT_SIZE]; // [outputSize]

    SmallDense() : inputSize(SMALLDENSE_INPUT_SIZE), outputSize(SMALLDENSE_OUTPUT_SIZE) {};

    void forwardSoftmax(float* input, float* outputGiven);

    // code is kind of being reused could abstract this and send it to some type of parent class 
    // causes no optimization and makes code to be less human-readable so omitted
    float dotCommon( float *operator1, float *operator2, int size=0){
        if(!size){ size = inputSize;}
        float result{};
        for (int i = 0; i < size; ++i) {
        result += operator1[i] * operator2[i];
        }
        return result;
    }
};

#endif // SmallDense_H
